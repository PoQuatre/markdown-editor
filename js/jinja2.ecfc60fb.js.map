{"mappings":"oUAAA,IAAIA,EAAW,CAAC,MAAO,KAAM,QAAS,WAAY,KAAM,QAAS,QAAS,OAAQ,OAClE,UAAW,SAAU,YAAa,UAAW,MAC7C,SAAU,KAAM,QAAS,YAAa,eACtC,UAAW,aAAc,aACzB,gBAAiB,KAAM,UAAW,OAAQ,MAAO,MAAO,KACxD,SAAU,UAAW,WAAY,YACjC,eAAgB,MAAO,cAAe,YACtC,aAAc,eAAgB,gBAC9B,YAAa,aAAc,cAC3B,eAAgB,aAAc,MAAO,OAAQ,UAC7C,uBAAwB,QAAS,WAAY,OAAQ,aACrD,gBAAiB,0BACjB,4BAA6B,UACzCC,EAAQ,oBACRC,EAAI,aACJC,EAAO,CAAC,OAAQ,SAChBC,EAAM,6BAKV,SAASC,EAAWC,EAAQC,GAC1B,IAAIC,EAAKF,EAAOG,OAGhB,GAAIF,EAAMG,UAOR,OANIJ,EAAOK,OAAO,OAGhBL,EAAOM,SAAQ,QACfL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIN,EAAMO,MAAO,CAEtB,GAAGP,EAAMQ,SAAU,CAEjB,GADAR,EAAMQ,UAAW,EACdT,EAAOU,MAAMb,GACd,MAAO,OAET,GAAGG,EAAOU,MAAMZ,GACd,MAAO,SAIX,GAAGG,EAAMU,KAAM,CAEb,GADAV,EAAMU,MAAO,EACVX,EAAOU,MAAMb,GACd,MAAO,OAET,GAAGG,EAAOU,MAAMZ,GACd,MAAO,SAIX,GAAGG,EAAMW,SAKP,OAJGV,GAAMD,EAAMW,WACbX,EAAMW,UAAW,GAEnBZ,EAAOa,OACA,SACF,GAAS,KAANX,GAAmB,KAANA,EAGrB,OAFAD,EAAMW,SAAWV,EACjBF,EAAOa,OACA,SACF,GAAGb,EAAOU,MAAMT,EAAMO,MAAQ,MAAQR,EAAOc,IAAI,MAAQd,EAAOU,MAAMT,EAAMO,MAAQ,KAEzF,OADAP,EAAMO,OAAQ,EACP,MACF,GAAGR,EAAOU,MAAMf,GAErB,OADAM,EAAMQ,UAAW,EACV,WACF,GAAGT,EAAOU,MAAMd,GACrBK,EAAMU,MAAO,OAEb,GAAGX,EAAOc,IAAI,MAAQd,EAAOe,MAAO,CAClC,GAAGf,EAAOU,MAAMhB,GACd,MAAO,UAET,GAAGM,EAAOU,MAAMb,GACd,MAAO,OAET,GAAGG,EAAOU,MAAMZ,GACd,MAAO,SAENE,EAAOe,OACRf,EAAOa,YAGTb,EAAOa,OAIX,MAAO,WACF,GAAIb,EAAOc,IAAI,KAAM,CAC1B,GAAId,EAAOc,IAAI,KAQb,OAPAb,EAAMG,WAAY,EACdJ,EAAOK,OAAO,OAGhBL,EAAOM,SAAQ,QACfL,EAAMG,WAAY,GAHlBJ,EAAOO,YAKF,UAEF,GAAIL,EAAKF,EAAOc,IAAG,QAOxB,OALAb,EAAMO,MAAQN,EACL,KAANA,IACDD,EAAMO,MAAQ,KAEhBR,EAAOc,IAAI,KACJ,MAGXd,EAAOa,OAjGTnB,EAAW,IAAIsB,OAAO,KAAOtB,EAASuB,KAAK,OAAS,SACpDpB,EAAO,IAAImB,OAAO,KAAOnB,EAAKoB,KAAK,OAAS,SAmGrC,MAAMC,EAAS,CACpBC,WAAY,WACV,MAAO,CAACC,SAAUrB,IAEpBsB,MAAO,SAAUrB,EAAQC,GACvB,OAAOA,EAAMmB,SAASpB,EAAQC,IAEhCqB,aAAc,CACZC,cAAe,CAACC,MAAO,CAACC,KAAM,KAAMC,MAAO","sources":["node_modules/@codemirror/legacy-modes/mode/jinja2.js"],"sourcesContent":["var keywords = [\"and\", \"as\", \"block\", \"endblock\", \"by\", \"cycle\", \"debug\", \"else\", \"elif\",\n                \"extends\", \"filter\", \"endfilter\", \"firstof\", \"for\",\n                \"endfor\", \"if\", \"endif\", \"ifchanged\", \"endifchanged\",\n                \"ifequal\", \"endifequal\", \"ifnotequal\",\n                \"endifnotequal\", \"in\", \"include\", \"load\", \"not\", \"now\", \"or\",\n                \"parsed\", \"regroup\", \"reversed\", \"spaceless\",\n                \"endspaceless\", \"ssi\", \"templatetag\", \"openblock\",\n                \"closeblock\", \"openvariable\", \"closevariable\",\n                \"openbrace\", \"closebrace\", \"opencomment\",\n                \"closecomment\", \"widthratio\", \"url\", \"with\", \"endwith\",\n                \"get_current_language\", \"trans\", \"endtrans\", \"noop\", \"blocktrans\",\n                \"endblocktrans\", \"get_available_languages\",\n                \"get_current_language_bidi\", \"plural\"],\n    operator = /^[+\\-*&%=<>!?|~^]/,\n    sign = /^[:\\[\\(\\{]/,\n    atom = [\"true\", \"false\"],\n    number = /^(\\d[+\\-\\*\\/])?\\d+(\\.\\d+)?/;\n\nkeywords = new RegExp(\"((\" + keywords.join(\")|(\") + \"))\\\\b\");\natom = new RegExp(\"((\" + atom.join(\")|(\") + \"))\\\\b\");\n\nfunction tokenBase (stream, state) {\n  var ch = stream.peek();\n\n  //Comment\n  if (state.incomment) {\n    if(!stream.skipTo(\"#}\")) {\n      stream.skipToEnd();\n    } else {\n      stream.eatWhile(/\\#|}/);\n      state.incomment = false;\n    }\n    return \"comment\";\n    //Tag\n  } else if (state.intag) {\n    //After operator\n    if(state.operator) {\n      state.operator = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n    //After sign\n    if(state.sign) {\n      state.sign = false;\n      if(stream.match(atom)) {\n        return \"atom\";\n      }\n      if(stream.match(number)) {\n        return \"number\";\n      }\n    }\n\n    if(state.instring) {\n      if(ch == state.instring) {\n        state.instring = false;\n      }\n      stream.next();\n      return \"string\";\n    } else if(ch == \"'\" || ch == '\"') {\n      state.instring = ch;\n      stream.next();\n      return \"string\";\n    } else if(stream.match(state.intag + \"}\") || stream.eat(\"-\") && stream.match(state.intag + \"}\")) {\n      state.intag = false;\n      return \"tag\";\n    } else if(stream.match(operator)) {\n      state.operator = true;\n      return \"operator\";\n    } else if(stream.match(sign)) {\n      state.sign = true;\n    } else {\n      if(stream.eat(\" \") || stream.sol()) {\n        if(stream.match(keywords)) {\n          return \"keyword\";\n        }\n        if(stream.match(atom)) {\n          return \"atom\";\n        }\n        if(stream.match(number)) {\n          return \"number\";\n        }\n        if(stream.sol()) {\n          stream.next();\n        }\n      } else {\n        stream.next();\n      }\n\n    }\n    return \"variable\";\n  } else if (stream.eat(\"{\")) {\n    if (stream.eat(\"#\")) {\n      state.incomment = true;\n      if(!stream.skipTo(\"#}\")) {\n        stream.skipToEnd();\n      } else {\n        stream.eatWhile(/\\#|}/);\n        state.incomment = false;\n      }\n      return \"comment\";\n      //Open tag\n    } else if (ch = stream.eat(/\\{|%/)) {\n      //Cache close tag\n      state.intag = ch;\n      if(ch == \"{\") {\n        state.intag = \"}\";\n      }\n      stream.eat(\"-\");\n      return \"tag\";\n    }\n  }\n  stream.next();\n};\n\nexport const jinja2 = {\n  startState: function () {\n    return {tokenize: tokenBase};\n  },\n  token: function (stream, state) {\n    return state.tokenize(stream, state);\n  },\n  languageData: {\n    commentTokens: {block: {open: \"{#\", close: \"#}\"}}\n  }\n};\n"],"names":["$63d67e7f7e71cc3c$var$keywords","$63d67e7f7e71cc3c$var$operator","$63d67e7f7e71cc3c$var$sign","$63d67e7f7e71cc3c$var$atom","$63d67e7f7e71cc3c$var$number","$63d67e7f7e71cc3c$var$tokenBase","stream","state","ch","peek","incomment","skipTo","eatWhile","skipToEnd","intag","operator","match","sign","instring","next","eat","sol","RegExp","join","$63d67e7f7e71cc3c$export$b4388fe1de243edc","startState","tokenize","token","languageData","commentTokens","block","open","close"],"version":3,"file":"jinja2.ecfc60fb.js.map"}