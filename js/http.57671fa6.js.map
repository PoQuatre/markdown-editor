{"mappings":"+MAAA,SAASA,EAAcC,EAAQC,GAG7B,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,QAGT,SAASC,EAAML,EAAQC,GACrB,OAAID,EAAOM,MAAK,kBACdL,EAAME,IAAMI,EACL,WACEP,EAAOM,MAAK,YAAe,QAAQE,KAAKR,EAAOS,SACxDR,EAAME,IAAMO,EACL,WAEAX,EAAcC,EAAQC,GAIjC,SAASM,EAAmBP,EAAQC,GAClC,IAAIU,EAAOX,EAAOM,MAAK,QACvB,IAAKK,EAAM,OAAOZ,EAAcC,EAAQC,GAExCA,EAAME,IAAMS,EACZ,IAAIC,EAASC,OAAOH,EAAK,IACzB,OAAIE,GAAU,KAAOA,EAAS,IACrB,OAEA,QAIX,SAASD,EAAmBZ,EAAQC,GAGlC,OAFAD,EAAOE,YACPD,EAAME,IAAMC,EACL,KAGT,SAASM,EAAYV,EAAQC,GAG3B,OAFAD,EAAOe,SAAQ,MACfd,EAAME,IAAMa,EACL,iBAGT,SAASA,EAAgBhB,EAAQC,GAC/B,OAAID,EAAOM,MAAK,mBACdL,EAAME,IAAMC,EACL,WAEAL,EAAcC,EAAQC,GAIjC,SAASG,EAAOJ,GACd,OAAIA,EAAOiB,QAAUjB,EAAOkB,IAAG,SACzBlB,EAAOM,MAAK,SACP,QAEPN,EAAOE,YACA,UAGTF,EAAOE,YACA,UAIX,SAASiB,EAAKnB,GAEZ,OADAA,EAAOE,YACA,wHAGF,IAAMkB,EAAO,CAClBC,MAAO,SAASrB,EAAQC,GACtB,IAAIE,EAAMF,EAAME,IAChB,OAAIA,GAAOC,GAAUD,GAAOgB,GAAQnB,EAAOsB,WAAmB,KACvDnB,EAAIH,EAAQC,IAGrBsB,UAAW,SAAStB,GAClBA,EAAME,IAAMgB,GAGdK,WAAY,WACV,MAAO,CAACrB,IAAKE","sources":["node_modules/@codemirror/legacy-modes/mode/http.js"],"sourcesContent":["function failFirstLine(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return \"error\";\n}\n\nfunction start(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d/)) {\n    state.cur = responseStatusCode;\n    return \"keyword\";\n  } else if (stream.match(/^[A-Z]+/) && /[ \\t]/.test(stream.peek())) {\n    state.cur = requestPath;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction responseStatusCode(stream, state) {\n  var code = stream.match(/^\\d+/);\n  if (!code) return failFirstLine(stream, state);\n\n  state.cur = responseStatusText;\n  var status = Number(code[0]);\n  if (status >= 100 && status < 400) {\n    return \"atom\";\n  } else {\n    return \"error\";\n  }\n}\n\nfunction responseStatusText(stream, state) {\n  stream.skipToEnd();\n  state.cur = header;\n  return null;\n}\n\nfunction requestPath(stream, state) {\n  stream.eatWhile(/\\S/);\n  state.cur = requestProtocol;\n  return \"string.special\";\n}\n\nfunction requestProtocol(stream, state) {\n  if (stream.match(/^HTTP\\/\\d\\.\\d$/)) {\n    state.cur = header;\n    return \"keyword\";\n  } else {\n    return failFirstLine(stream, state);\n  }\n}\n\nfunction header(stream) {\n  if (stream.sol() && !stream.eat(/[ \\t]/)) {\n    if (stream.match(/^.*?:/)) {\n      return \"atom\";\n    } else {\n      stream.skipToEnd();\n      return \"error\";\n    }\n  } else {\n    stream.skipToEnd();\n    return \"string\";\n  }\n}\n\nfunction body(stream) {\n  stream.skipToEnd();\n  return null;\n}\n\nexport const http = {\n  token: function(stream, state) {\n    var cur = state.cur;\n    if (cur != header && cur != body && stream.eatSpace()) return null;\n    return cur(stream, state);\n  },\n\n  blankLine: function(state) {\n    state.cur = body;\n  },\n\n  startState: function() {\n    return {cur: start};\n  }\n};\n"],"names":["$2f454cc51f2a575e$var$failFirstLine","stream","state","skipToEnd","cur","$2f454cc51f2a575e$var$header","$2f454cc51f2a575e$var$start","match","$2f454cc51f2a575e$var$responseStatusCode","test","peek","$2f454cc51f2a575e$var$requestPath","code","$2f454cc51f2a575e$var$responseStatusText","status","Number","eatWhile","$2f454cc51f2a575e$var$requestProtocol","sol","eat","$2f454cc51f2a575e$var$body","$2f454cc51f2a575e$export$7d6f1c8842f9f527","token","eatSpace","blankLine","startState"],"version":3,"file":"http.57671fa6.js.map"}