{"mappings":"+MAAA,SAASA,EAAMC,GAEb,IADA,IAAIC,EAAM,GAAIC,EAAQF,EAAIG,MAAM,KACvBC,EAAI,EAAGA,EAAIF,EAAMG,SAAUD,EAAGH,EAAIC,EAAME,KAAM,EACvD,OAAOH,uHAET,IAUIK,EAVAC,EAAWR,EACb,4WAKES,EAAgBT,EAAM,gFACtBU,EAAqBV,EAAM,yBAC3BW,EAAQX,EAAM,wBAGlB,SAASY,EAAUC,EAAQC,GACzB,IAAIC,EAAKF,EAAOG,OAChB,GAAU,KAAND,GAAmB,KAANA,EACf,OAAOE,EAAYF,EAAIF,EAAQC,GAEjC,GAAI,qBAAqBI,KAAKH,GAE5B,OADAR,EAAUQ,EACH,KAET,GAAI,KAAKG,KAAKH,GAGZ,OAFAF,EAAOM,SAAQ,UACXN,EAAOO,IAAG,QAAUP,EAAOO,IAAG,QAAUP,EAAOM,SAAQ,OACpD,SAET,GAAU,KAANJ,EAAW,CACb,GAAIF,EAAOO,IAAI,KAEb,OADAN,EAAMO,SAASC,KAAKC,GACbA,EAAaV,EAAQC,GAE9B,GAAID,EAAOO,IAAI,KAEb,OADAP,EAAOW,YACA,UAET,GAAIC,EAAiBX,EAAMY,WAAW,GACpC,OAAOT,EAAYF,EAAIF,EAAQC,GAGnC,GAAU,KAANC,GAAaF,EAAOO,IAAI,KAE1B,OADAb,EAAU,KACH,KAET,GAAI,oBAAoBW,KAAKH,GAE3B,OADAF,EAAOM,SAAQ,iBACR,WAGT,GADAN,EAAOM,SAAQ,WACL,KAANJ,EAA2C,OAA9BF,EAAOM,SAAQ,aAAsB,OACtD,GAAuB,KAAnBL,EAAMY,UAAkB,MAAO,WACnC,GAAIb,EAAOO,IAAI,KAA+B,OAAvBb,EAAU,YAAoB,WACrD,IAAIoB,EAAMd,EAAOe,UACjB,OAAIjB,EAAMkB,qBAAqBF,GAAe,OAC1CnB,EAASqB,qBAAqBF,IAC5BlB,EAAcoB,qBAAqBF,GAAMpB,EAAU,eAC9CG,EAAmBmB,qBAAqBF,KAAMpB,EAAU,cAC1D,WAEF,WAIT,SAASU,EAAYa,EAAOC,EAAQC,GAClC,IAAIC,GAAe,EACnB,GAAa,KAATH,GAAgBC,EAAOX,IAAIU,GAAQ,CACrC,IAAIC,EAAOX,IAAIU,GACV,MAAO,SADWG,GAAe,EAGxC,SAASC,EAAErB,EAAQC,GAEjB,IADA,IAAqBE,EAAjBmB,GAAU,EAAaC,GAAOH,EACD,OAAzBjB,EAAOH,EAAOG,SAAiB,CACrC,GAAIA,GAAQc,IAAUK,EAAS,CAC7B,IAAKF,EAAgB,MACrB,GAAIpB,EAAOwB,MAAMP,EAAQA,GAAQ,CAAEM,GAAM,EAAM,OAEjD,GAAa,KAATN,GAAwB,KAARd,IAAgBmB,GAAWtB,EAAOO,IAAI,KAExD,OADAN,EAAMO,SAASC,KAAKgB,KACb,SAETH,GAAWA,GAAmB,MAARnB,EAGxB,OADIoB,GAAKtB,EAAMO,SAASkB,MACjB,SAGT,OADAP,EAAMX,SAASC,KAAKY,GACbA,EAAEH,EAAQC,GAGnB,SAASM,IACP,IAAIE,EAAQ,EACZ,SAASN,EAAErB,EAAQC,GACjB,GAAqB,KAAjBD,EAAO4B,QAET,GAAa,KADbD,EAGE,OADA1B,EAAMO,SAASkB,MACRzB,EAAMO,SAASP,EAAMO,SAASf,OAAO,GAAGO,EAAQC,OAE/B,KAAjBD,EAAO4B,QAChBD,IAEF,OAAO5B,EAAUC,EAAQC,GAG3B,OADAoB,EAAEQ,QAAS,EACJR,EAGT,SAASX,EAAaV,EAAQC,GAE5B,IADA,IAAsBC,EAAlB4B,GAAW,EACR5B,EAAKF,EAAOG,QAAQ,CACzB,GAAU,KAAND,GAAa4B,EAAU,CACzB7B,EAAMO,SAASkB,MACf,MAEFI,EAAkB,KAAN5B,EAEd,MAAO,UAGT,SAASU,EAAiBmB,EAAMC,GAC9B,OAAQD,GAAgB,YAARA,GAA8B,MAARA,GAAgB,gBAAgB1B,KAAK0B,IACjE,gBAARA,GAAkC,WAARA,GAA6B,aAARA,GACtC,cAARA,IAAyBC,EAG9B,SAASC,EAAQC,EAAUC,EAAQC,EAAMC,EAAOC,GAC9CC,KAAKL,SAAWA,EAChBK,KAAKJ,OAASA,EACdI,KAAKH,KAAOA,EACZG,KAAKF,MAAQA,EACbE,KAAKD,KAAOA,EAEd,SAASE,EAAYvC,EAAOwC,EAAKL,GAC/B,OAAOnC,EAAMyC,QAAU,IAAIT,EAAQhC,EAAMiC,SAAUO,EAAKL,EAAM,KAAMnC,EAAMyC,SAE5E,SAASC,EAAW1C,GAClB,IAAIoB,EAAIpB,EAAMyC,QAAQN,KAGtB,MAFS,KAALf,GAAiB,KAALA,GAAiB,KAALA,IAC1BpB,EAAMiC,SAAWjC,EAAMyC,QAAQR,UAC1BjC,EAAMyC,QAAUzC,EAAMyC,QAAQJ,KA9EvCvC,EAAU8B,QAAS,EAmFZ,IAAMe,EAAS,CACpBC,WAAY,SAASC,GACnB,MAAO,CACLtC,SAAU,CAACT,GACX2C,QAAS,IAAIT,GAASa,EAAY,EAAG,OAAO,GAC5CZ,SAAU,EACVa,aAAa,EACblC,UAAW,OAIfmC,MAAO,SAAShD,EAAQC,GACtB,IAAIgD,EAAMhD,EAAMyC,QAUhB,GATI1C,EAAOkD,QACQ,MAAbD,EAAIZ,QAAeY,EAAIZ,OAAQ,GACnCpC,EAAMiC,SAAWlC,EAAOmD,cACxBlD,EAAM8C,aAAc,EAEJ,aAAZE,EAAIb,MAAwBxB,EAAiBX,EAAMY,WAAW,KAChE8B,EAAW1C,GAAQgD,EAAMhD,EAAMyC,UAG/B1C,EAAOoD,WAAY,OAAO,KAC9B1D,EAAU,KACV,IAAI2D,EAAQpD,EAAMO,SAASP,EAAMO,SAASf,OAAO,GAAGO,EAAQC,GAC5D,GAAa,WAAToD,EAAoB,OAAOA,EAG/B,GAFiB,MAAbJ,EAAIZ,QAAeY,EAAIZ,OAAQ,GAEnB,KAAX3C,GAA6B,KAAXA,GAA+B,aAAZuD,EAAIb,KAEzC,GAAe,MAAX1C,GAA+B,aAAZuD,EAAIb,MAAwC,KAAjBa,EAAIX,KAAKF,KAC9DO,EAAW1C,GACXA,EAAMyC,QAAQL,OAAQ,OAEnB,GAAe,KAAX3C,EAAgB8C,EAAYvC,EAAOD,EAAOmC,SAAU,UACxD,GAAe,KAAXzC,EAAgB8C,EAAYvC,EAAOD,EAAOmC,SAAU,UACxD,GAAe,KAAXzC,EAAgB8C,EAAYvC,EAAOD,EAAOmC,SAAU,UACxD,GAAe,KAAXzC,EAAgB,CACvB,KAAmB,aAAZuD,EAAIb,MAAqBa,EAAMN,EAAW1C,GAEjD,IADgB,KAAZgD,EAAIb,OAAaa,EAAMN,EAAW1C,IACnB,aAAZgD,EAAIb,MAAqBa,EAAMN,EAAW1C,QAE1CP,GAAWuD,EAAIb,KAAMO,EAAW1C,IACpB,KAAZgD,EAAIb,MAA2B,OAAZa,EAAIb,MAA8B,aAAZa,EAAIb,MAAkC,gBAAX1C,IAC3E8C,EAAYvC,EAAOD,EAAOmC,SAAU,kBAhB6BQ,EAAW1C,GAmB9E,OAFAA,EAAM8C,aAAc,EACpB9C,EAAMY,UAAYnB,GAAW2D,EACtBA,GAGTC,OAAQ,SAASrD,EAAOsD,EAAWC,GACjC,IAAKvD,EAAMO,SAASP,EAAMO,SAASf,OAAO,GAAGoC,OAAQ,OAAO,KAC5D,IAAI4B,EAAYF,GAAaA,EAAUG,OAAO,GAAIT,EAAMhD,EAAMyC,QAC9C,aAAZO,EAAIb,MAAwBxB,EAAiBX,EAAMY,WAAW,KAAOoC,EAAMA,EAAIX,MACnF,IAAIqB,EAAUF,GAAaR,EAAIb,KAC/B,MAAgB,aAAZa,EAAIb,KAA4Ba,EAAIf,UAAyB,KAAbuB,EAAmB,EAAID,EAAGI,MACrEX,EAAIZ,MAAcY,EAAId,QAAUwB,EAAU,EAAI,GAC3CV,EAAIf,UAAYyB,EAAU,EAAIH,EAAGI,OAG/CC,aAAc,CACZC,cAAa,YACbC,cAAe,CAACC,KAAM,KAAMC,MAAO,CAACC,KAAM,KAAMC,MAAO,OACvDC,cAAe,CAACC,SAAU,CAAC,IAAK,IAAK,IAAK,IAAK,IAAK,MAAO","sources":["node_modules/@codemirror/legacy-modes/mode/groovy.js"],"sourcesContent":["function words(str) {\n  var obj = {}, words = str.split(\" \");\n  for (var i = 0; i < words.length; ++i) obj[words[i]] = true;\n  return obj;\n}\nvar keywords = words(\n  \"abstract as assert boolean break byte case catch char class const continue def default \" +\n    \"do double else enum extends final finally float for goto if implements import in \" +\n    \"instanceof int interface long native new package private protected public return \" +\n    \"short static strictfp super switch synchronized threadsafe throw throws trait transient \" +\n    \"try void volatile while\");\nvar blockKeywords = words(\"catch class def do else enum finally for if interface switch trait try while\");\nvar standaloneKeywords = words(\"return break continue\");\nvar atoms = words(\"null true false this\");\n\nvar curPunc;\nfunction tokenBase(stream, state) {\n  var ch = stream.next();\n  if (ch == '\"' || ch == \"'\") {\n    return startString(ch, stream, state);\n  }\n  if (/[\\[\\]{}\\(\\),;\\:\\.]/.test(ch)) {\n    curPunc = ch;\n    return null;\n  }\n  if (/\\d/.test(ch)) {\n    stream.eatWhile(/[\\w\\.]/);\n    if (stream.eat(/eE/)) { stream.eat(/\\+\\-/); stream.eatWhile(/\\d/); }\n    return \"number\";\n  }\n  if (ch == \"/\") {\n    if (stream.eat(\"*\")) {\n      state.tokenize.push(tokenComment);\n      return tokenComment(stream, state);\n    }\n    if (stream.eat(\"/\")) {\n      stream.skipToEnd();\n      return \"comment\";\n    }\n    if (expectExpression(state.lastToken, false)) {\n      return startString(ch, stream, state);\n    }\n  }\n  if (ch == \"-\" && stream.eat(\">\")) {\n    curPunc = \"->\";\n    return null;\n  }\n  if (/[+\\-*&%=<>!?|\\/~]/.test(ch)) {\n    stream.eatWhile(/[+\\-*&%=<>|~]/);\n    return \"operator\";\n  }\n  stream.eatWhile(/[\\w\\$_]/);\n  if (ch == \"@\") { stream.eatWhile(/[\\w\\$_\\.]/); return \"meta\"; }\n  if (state.lastToken == \".\") return \"property\";\n  if (stream.eat(\":\")) { curPunc = \"proplabel\"; return \"property\"; }\n  var cur = stream.current();\n  if (atoms.propertyIsEnumerable(cur)) { return \"atom\"; }\n  if (keywords.propertyIsEnumerable(cur)) {\n    if (blockKeywords.propertyIsEnumerable(cur)) curPunc = \"newstatement\";\n    else if (standaloneKeywords.propertyIsEnumerable(cur)) curPunc = \"standalone\";\n    return \"keyword\";\n  }\n  return \"variable\";\n}\ntokenBase.isBase = true;\n\nfunction startString(quote, stream, state) {\n  var tripleQuoted = false;\n  if (quote != \"/\" && stream.eat(quote)) {\n    if (stream.eat(quote)) tripleQuoted = true;\n    else return \"string\";\n  }\n  function t(stream, state) {\n    var escaped = false, next, end = !tripleQuoted;\n    while ((next = stream.next()) != null) {\n      if (next == quote && !escaped) {\n        if (!tripleQuoted) { break; }\n        if (stream.match(quote + quote)) { end = true; break; }\n      }\n      if (quote == '\"' && next == \"$\" && !escaped && stream.eat(\"{\")) {\n        state.tokenize.push(tokenBaseUntilBrace());\n        return \"string\";\n      }\n      escaped = !escaped && next == \"\\\\\";\n    }\n    if (end) state.tokenize.pop();\n    return \"string\";\n  }\n  state.tokenize.push(t);\n  return t(stream, state);\n}\n\nfunction tokenBaseUntilBrace() {\n  var depth = 1;\n  function t(stream, state) {\n    if (stream.peek() == \"}\") {\n      depth--;\n      if (depth == 0) {\n        state.tokenize.pop();\n        return state.tokenize[state.tokenize.length-1](stream, state);\n      }\n    } else if (stream.peek() == \"{\") {\n      depth++;\n    }\n    return tokenBase(stream, state);\n  }\n  t.isBase = true;\n  return t;\n}\n\nfunction tokenComment(stream, state) {\n  var maybeEnd = false, ch;\n  while (ch = stream.next()) {\n    if (ch == \"/\" && maybeEnd) {\n      state.tokenize.pop();\n      break;\n    }\n    maybeEnd = (ch == \"*\");\n  }\n  return \"comment\";\n}\n\nfunction expectExpression(last, newline) {\n  return !last || last == \"operator\" || last == \"->\" || /[\\.\\[\\{\\(,;:]/.test(last) ||\n    last == \"newstatement\" || last == \"keyword\" || last == \"proplabel\" ||\n    (last == \"standalone\" && !newline);\n}\n\nfunction Context(indented, column, type, align, prev) {\n  this.indented = indented;\n  this.column = column;\n  this.type = type;\n  this.align = align;\n  this.prev = prev;\n}\nfunction pushContext(state, col, type) {\n  return state.context = new Context(state.indented, col, type, null, state.context);\n}\nfunction popContext(state) {\n  var t = state.context.type;\n  if (t == \")\" || t == \"]\" || t == \"}\")\n    state.indented = state.context.indented;\n  return state.context = state.context.prev;\n}\n\n// Interface\n\nexport const groovy = {\n  startState: function(indentUnit) {\n    return {\n      tokenize: [tokenBase],\n      context: new Context(-indentUnit, 0, \"top\", false),\n      indented: 0,\n      startOfLine: true,\n      lastToken: null\n    };\n  },\n\n  token: function(stream, state) {\n    var ctx = state.context;\n    if (stream.sol()) {\n      if (ctx.align == null) ctx.align = false;\n      state.indented = stream.indentation();\n      state.startOfLine = true;\n      // Automatic semicolon insertion\n      if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) {\n        popContext(state); ctx = state.context;\n      }\n    }\n    if (stream.eatSpace()) return null;\n    curPunc = null;\n    var style = state.tokenize[state.tokenize.length-1](stream, state);\n    if (style == \"comment\") return style;\n    if (ctx.align == null) ctx.align = true;\n\n    if ((curPunc == \";\" || curPunc == \":\") && ctx.type == \"statement\") popContext(state);\n    // Handle indentation for {x -> \\n ... }\n    else if (curPunc == \"->\" && ctx.type == \"statement\" && ctx.prev.type == \"}\") {\n      popContext(state);\n      state.context.align = false;\n    }\n    else if (curPunc == \"{\") pushContext(state, stream.column(), \"}\");\n    else if (curPunc == \"[\") pushContext(state, stream.column(), \"]\");\n    else if (curPunc == \"(\") pushContext(state, stream.column(), \")\");\n    else if (curPunc == \"}\") {\n      while (ctx.type == \"statement\") ctx = popContext(state);\n      if (ctx.type == \"}\") ctx = popContext(state);\n      while (ctx.type == \"statement\") ctx = popContext(state);\n    }\n    else if (curPunc == ctx.type) popContext(state);\n    else if (ctx.type == \"}\" || ctx.type == \"top\" || (ctx.type == \"statement\" && curPunc == \"newstatement\"))\n      pushContext(state, stream.column(), \"statement\");\n    state.startOfLine = false;\n    state.lastToken = curPunc || style;\n    return style;\n  },\n\n  indent: function(state, textAfter, cx) {\n    if (!state.tokenize[state.tokenize.length-1].isBase) return null;\n    var firstChar = textAfter && textAfter.charAt(0), ctx = state.context;\n    if (ctx.type == \"statement\" && !expectExpression(state.lastToken, true)) ctx = ctx.prev;\n    var closing = firstChar == ctx.type;\n    if (ctx.type == \"statement\") return ctx.indented + (firstChar == \"{\" ? 0 : cx.unit);\n    else if (ctx.align) return ctx.column + (closing ? 0 : 1);\n    else return ctx.indented + (closing ? 0 : cx.unit);\n  },\n\n  languageData: {\n    indentOnInput: /^\\s*[{}]$/,\n    commentTokens: {line: \"//\", block: {open: \"/*\", close: \"*/\"}},\n    closeBrackets: {brackets: [\"(\", \"[\", \"{\", \"'\", '\"', \"'''\", '\"\"\"']}\n  }\n};\n"],"names":["$cac399c6903b8cbc$var$words","str","obj","_$words","split","i","length","$cac399c6903b8cbc$var$curPunc","$cac399c6903b8cbc$var$keywords","$cac399c6903b8cbc$var$blockKeywords","$cac399c6903b8cbc$var$standaloneKeywords","$cac399c6903b8cbc$var$atoms","$cac399c6903b8cbc$var$tokenBase","stream","state","ch","next","$cac399c6903b8cbc$var$startString","test","eatWhile","eat","tokenize","push","$cac399c6903b8cbc$var$tokenComment","skipToEnd","$cac399c6903b8cbc$var$expectExpression","lastToken","cur","current","propertyIsEnumerable","quote","stream1","state1","tripleQuoted","t","escaped","end","match","$cac399c6903b8cbc$var$tokenBaseUntilBrace","pop","depth","peek","isBase","maybeEnd","last","newline","$cac399c6903b8cbc$var$Context","indented","column","type","align","prev","this","$cac399c6903b8cbc$var$pushContext","col","context","$cac399c6903b8cbc$var$popContext","$cac399c6903b8cbc$export$5cbb82695c70f3e3","startState","indentUnit","startOfLine","token","ctx","sol","indentation","eatSpace","style","indent","textAfter","cx","firstChar","charAt","closing","unit","languageData","indentOnInput","commentTokens","line","block","open","close","closeBrackets","brackets"],"version":3,"file":"groovy.0459e3e9.js.map"}