{"mappings":"kUAAA,IAAIA,EAAU,CACZ,OAAQ,SAAU,WAAY,KAAM,KAAM,MAAO,aACjD,cAAe,aAAc,cAAe,gBAAiB,YAC7D,YAAa,aAAc,oBAAqB,cAAe,YAE7DC,EAAiB,CACnB,OAAQ,UAAW,WAAY,WAAY,eAGzCC,EAAU,SACVC,EAAS,SACTC,EAAgB,IAAIC,OAAO,KAAOL,EAAQM,KAAK,KAAO,OACtDC,EAAuB,IAAIF,OAAO,KAAOJ,EAAeK,KAAK,KAAO,OACpEE,EAAM,UACNC,EAAK,eACLC,EAAU,uBACVC,EAAc,SACdC,EAAmB,eAwEhB,MAAMC,EAAO,CAClBC,WAAY,WACV,MAAO,CAELC,aAAa,EAEbC,UAAU,EAEVC,gBAAgB,EAEhBC,OAAQ,KAERC,WAAW,IAGfC,MAhFF,SAAmBC,EAAQC,GACzB,GAAID,EAAOE,MAAO,CAGhB,GADAD,EAAMP,aAAc,EAChBO,EAAMN,UAAYK,EAAOG,MAAMtB,GAEjC,OAAO,KAMT,GAJEoB,EAAMN,UAAW,EACjBM,EAAMJ,OAAS,KAGbG,EAAOG,MAAMrB,GAGf,OAFAmB,EAAMH,WAAY,EAClBG,EAAMP,aAAc,EACb,OAGT,IAAIS,EACAP,GAAiB,EACrB,OAAKO,EAAQH,EAAOG,MAAMjB,MACrBU,GAAiB,EAAUO,EAAQH,EAAOG,MAAMpB,KACnDkB,EAAMH,WAAY,EAClBG,EAAMN,UAAW,EACjBM,EAAML,eAAiBA,EACvBK,EAAMJ,OAASM,EAAM,GACd,QAKLF,EAAMH,YAAcK,EAAQH,EAAOG,MAAMhB,KAC3Cc,EAAMN,UAAW,EACjBM,EAAML,gBAAiB,EACvBK,EAAMJ,OAASM,EAAM,GACd,SAGTF,EAAMH,WAAY,EAClBE,EAAOI,YACA,MAGT,GAAIH,EAAMP,YACR,OAAIM,EAAOG,MAAMf,GAAe,QAC5BY,EAAOG,MAAMd,IACjBW,EAAOI,YAD8B,QAKvC,GAAIH,EAAMN,SAAU,CAClB,IAAIU,EAvDS,YAuDcJ,EAAMJ,OAvDF,SAC1B,SAwDL,GAAII,EAAML,eAAgB,CACxB,GAAII,EAAOG,MAAMb,GAAiB,OAAOe,EAAQ,QACjD,GAAIL,EAAOG,MAAMZ,GAAsB,OAAOc,EAGhD,OADAL,EAAOI,YACAC,EAIT,OADAL,EAAOI,YACA,MAmBPE,UAAW,SAASL,GAClBA,EAAMH,UAAYG,EAAMP,YAAcO,EAAMN,UAAW,GAEzDY,aAAc,CACZC,aAAc7B,EAAQ8B,OAAO7B","sources":["node_modules/@codemirror/legacy-modes/mode/mbox.js"],"sourcesContent":["var rfc2822 = [\n  \"From\", \"Sender\", \"Reply-To\", \"To\", \"Cc\", \"Bcc\", \"Message-ID\",\n  \"In-Reply-To\", \"References\", \"Resent-From\", \"Resent-Sender\", \"Resent-To\",\n  \"Resent-Cc\", \"Resent-Bcc\", \"Resent-Message-ID\", \"Return-Path\", \"Received\"\n];\nvar rfc2822NoEmail = [\n  \"Date\", \"Subject\", \"Comments\", \"Keywords\", \"Resent-Date\"\n];\n\nvar whitespace = /^[ \\t]/;\nvar separator = /^From /; // See RFC 4155\nvar rfc2822Header = new RegExp(\"^(\" + rfc2822.join(\"|\") + \"): \");\nvar rfc2822HeaderNoEmail = new RegExp(\"^(\" + rfc2822NoEmail.join(\"|\") + \"): \");\nvar header = /^[^:]+:/; // Optional fields defined in RFC 2822\nvar email = /^[^ ]+@[^ ]+/;\nvar untilEmail = /^.*?(?=[^ ]+?@[^ ]+)/;\nvar bracketedEmail = /^<.*?>/;\nvar untilBracketedEmail = /^.*?(?=<.*>)/;\n\nfunction styleForHeader(header) {\n  if (header === \"Subject\") return \"header\";\n  return \"string\";\n}\n\nfunction readToken(stream, state) {\n  if (stream.sol()) {\n    // From last line\n    state.inSeparator = false;\n    if (state.inHeader && stream.match(whitespace)) {\n      // Header folding\n      return null;\n    } else {\n      state.inHeader = false;\n      state.header = null;\n    }\n\n    if (stream.match(separator)) {\n      state.inHeaders = true;\n      state.inSeparator = true;\n      return \"atom\";\n    }\n\n    var match;\n    var emailPermitted = false;\n    if ((match = stream.match(rfc2822HeaderNoEmail)) ||\n        (emailPermitted = true) && (match = stream.match(rfc2822Header))) {\n      state.inHeaders = true;\n      state.inHeader = true;\n      state.emailPermitted = emailPermitted;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    // Use vim's heuristics: recognize custom headers only if the line is in a\n    // block of legitimate headers.\n    if (state.inHeaders && (match = stream.match(header))) {\n      state.inHeader = true;\n      state.emailPermitted = true;\n      state.header = match[1];\n      return \"atom\";\n    }\n\n    state.inHeaders = false;\n    stream.skipToEnd();\n    return null;\n  }\n\n  if (state.inSeparator) {\n    if (stream.match(email)) return \"link\";\n    if (stream.match(untilEmail)) return \"atom\";\n    stream.skipToEnd();\n    return \"atom\";\n  }\n\n  if (state.inHeader) {\n    var style = styleForHeader(state.header);\n\n    if (state.emailPermitted) {\n      if (stream.match(bracketedEmail)) return style + \" link\";\n      if (stream.match(untilBracketedEmail)) return style;\n    }\n    stream.skipToEnd();\n    return style;\n  }\n\n  stream.skipToEnd();\n  return null;\n};\n\nexport const mbox = {\n  startState: function() {\n    return {\n      // Is in a mbox separator\n      inSeparator: false,\n      // Is in a mail header\n      inHeader: false,\n      // If bracketed email is permitted. Only applicable when inHeader\n      emailPermitted: false,\n      // Name of current header\n      header: null,\n      // Is in a region of mail headers\n      inHeaders: false\n    };\n  },\n  token: readToken,\n  blankLine: function(state) {\n    state.inHeaders = state.inSeparator = state.inHeader = false;\n  },\n  languageData: {\n    autocomplete: rfc2822.concat(rfc2822NoEmail)\n  }\n}\n\n"],"names":["$7f3d12132cd0a94f$var$rfc2822","$7f3d12132cd0a94f$var$rfc2822NoEmail","$7f3d12132cd0a94f$var$whitespace","$7f3d12132cd0a94f$var$separator","$7f3d12132cd0a94f$var$rfc2822Header","RegExp","join","$7f3d12132cd0a94f$var$rfc2822HeaderNoEmail","$7f3d12132cd0a94f$var$header","$7f3d12132cd0a94f$var$email","$7f3d12132cd0a94f$var$untilEmail","$7f3d12132cd0a94f$var$bracketedEmail","$7f3d12132cd0a94f$var$untilBracketedEmail","$7f3d12132cd0a94f$export$ea8f8755af44bbba","startState","inSeparator","inHeader","emailPermitted","header","inHeaders","token","stream","state","sol","match","skipToEnd","style","blankLine","languageData","autocomplete","concat"],"version":3,"file":"mbox.a80d4bdf.js.map"}