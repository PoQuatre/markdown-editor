{"mappings":"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","sources":["node_modules/@codemirror/legacy-modes/mode/coffeescript.js"],"sourcesContent":["var ERRORCLASS = \"error\";\n\nfunction wordRegexp(words) {\n  return new RegExp(\"^((\" + words.join(\")|(\") + \"))\\\\b\");\n}\n\nvar operators = /^(?:->|=>|\\+[+=]?|-[\\-=]?|\\*[\\*=]?|\\/[\\/=]?|[=!]=|<[><]?=?|>>?=?|%=?|&=?|\\|=?|\\^=?|\\~|!|\\?|(or|and|\\|\\||&&|\\?)=)/;\nvar delimiters = /^(?:[()\\[\\]{},:`=;]|\\.\\.?\\.?)/;\nvar identifiers = /^[_A-Za-z$][_A-Za-z$0-9]*/;\nvar atProp = /^@[_A-Za-z$][_A-Za-z$0-9]*/;\n\nvar wordOperators = wordRegexp([\"and\", \"or\", \"not\",\n                                \"is\", \"isnt\", \"in\",\n                                \"instanceof\", \"typeof\"]);\nvar indentKeywords = [\"for\", \"while\", \"loop\", \"if\", \"unless\", \"else\",\n                      \"switch\", \"try\", \"catch\", \"finally\", \"class\"];\nvar commonKeywords = [\"break\", \"by\", \"continue\", \"debugger\", \"delete\",\n                      \"do\", \"in\", \"of\", \"new\", \"return\", \"then\",\n                      \"this\", \"@\", \"throw\", \"when\", \"until\", \"extends\"];\n\nvar keywords = wordRegexp(indentKeywords.concat(commonKeywords));\n\nindentKeywords = wordRegexp(indentKeywords);\n\n\nvar stringPrefixes = /^('{3}|\\\"{3}|['\\\"])/;\nvar regexPrefixes = /^(\\/{3}|\\/)/;\nvar commonConstants = [\"Infinity\", \"NaN\", \"undefined\", \"null\", \"true\", \"false\", \"on\", \"off\", \"yes\", \"no\"];\nvar constants = wordRegexp(commonConstants);\n\n// Tokenizers\nfunction tokenBase(stream, state) {\n  // Handle scope changes\n  if (stream.sol()) {\n    if (state.scope.align === null) state.scope.align = false;\n    var scopeOffset = state.scope.offset;\n    if (stream.eatSpace()) {\n      var lineOffset = stream.indentation();\n      if (lineOffset > scopeOffset && state.scope.type == \"coffee\") {\n        return \"indent\";\n      } else if (lineOffset < scopeOffset) {\n        return \"dedent\";\n      }\n      return null;\n    } else {\n      if (scopeOffset > 0) {\n        dedent(stream, state);\n      }\n    }\n  }\n  if (stream.eatSpace()) {\n    return null;\n  }\n\n  var ch = stream.peek();\n\n  // Handle docco title comment (single line)\n  if (stream.match(\"####\")) {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle multi line comments\n  if (stream.match(\"###\")) {\n    state.tokenize = longComment;\n    return state.tokenize(stream, state);\n  }\n\n  // Single line comment\n  if (ch === \"#\") {\n    stream.skipToEnd();\n    return \"comment\";\n  }\n\n  // Handle number literals\n  if (stream.match(/^-?[0-9\\.]/, false)) {\n    var floatLiteral = false;\n    // Floats\n    if (stream.match(/^-?\\d*\\.\\d+(e[\\+\\-]?\\d+)?/i)) {\n      floatLiteral = true;\n    }\n    if (stream.match(/^-?\\d+\\.\\d*/)) {\n      floatLiteral = true;\n    }\n    if (stream.match(/^-?\\.\\d+/)) {\n      floatLiteral = true;\n    }\n\n    if (floatLiteral) {\n      // prevent from getting extra . on 1..\n      if (stream.peek() == \".\"){\n        stream.backUp(1);\n      }\n      return \"number\";\n    }\n    // Integers\n    var intLiteral = false;\n    // Hex\n    if (stream.match(/^-?0x[0-9a-f]+/i)) {\n      intLiteral = true;\n    }\n    // Decimal\n    if (stream.match(/^-?[1-9]\\d*(e[\\+\\-]?\\d+)?/)) {\n      intLiteral = true;\n    }\n    // Zero by itself with no other piece of number.\n    if (stream.match(/^-?0(?![\\dx])/i)) {\n      intLiteral = true;\n    }\n    if (intLiteral) {\n      return \"number\";\n    }\n  }\n\n  // Handle strings\n  if (stream.match(stringPrefixes)) {\n    state.tokenize = tokenFactory(stream.current(), false, \"string\");\n    return state.tokenize(stream, state);\n  }\n  // Handle regex literals\n  if (stream.match(regexPrefixes)) {\n    if (stream.current() != \"/\" || stream.match(/^.*\\//, false)) { // prevent highlight of division\n      state.tokenize = tokenFactory(stream.current(), true, \"string.special\");\n      return state.tokenize(stream, state);\n    } else {\n      stream.backUp(1);\n    }\n  }\n\n\n\n  // Handle operators and delimiters\n  if (stream.match(operators) || stream.match(wordOperators)) {\n    return \"operator\";\n  }\n  if (stream.match(delimiters)) {\n    return \"punctuation\";\n  }\n\n  if (stream.match(constants)) {\n    return \"atom\";\n  }\n\n  if (stream.match(atProp) || state.prop && stream.match(identifiers)) {\n    return \"property\";\n  }\n\n  if (stream.match(keywords)) {\n    return \"keyword\";\n  }\n\n  if (stream.match(identifiers)) {\n    return \"variable\";\n  }\n\n  // Handle non-detected items\n  stream.next();\n  return ERRORCLASS;\n}\n\nfunction tokenFactory(delimiter, singleline, outclass) {\n  return function(stream, state) {\n    while (!stream.eol()) {\n      stream.eatWhile(/[^'\"\\/\\\\]/);\n      if (stream.eat(\"\\\\\")) {\n        stream.next();\n        if (singleline && stream.eol()) {\n          return outclass;\n        }\n      } else if (stream.match(delimiter)) {\n        state.tokenize = tokenBase;\n        return outclass;\n      } else {\n        stream.eat(/['\"\\/]/);\n      }\n    }\n    if (singleline) {\n      state.tokenize = tokenBase;\n    }\n    return outclass;\n  };\n}\n\nfunction longComment(stream, state) {\n  while (!stream.eol()) {\n    stream.eatWhile(/[^#]/);\n    if (stream.match(\"###\")) {\n      state.tokenize = tokenBase;\n      break;\n    }\n    stream.eatWhile(\"#\");\n  }\n  return \"comment\";\n}\n\nfunction indent(stream, state, type = \"coffee\") {\n  var offset = 0, align = false, alignOffset = null;\n  for (var scope = state.scope; scope; scope = scope.prev) {\n    if (scope.type === \"coffee\" || scope.type == \"}\") {\n      offset = scope.offset + stream.indentUnit;\n      break;\n    }\n  }\n  if (type !== \"coffee\") {\n    align = null;\n    alignOffset = stream.column() + stream.current().length;\n  } else if (state.scope.align) {\n    state.scope.align = false;\n  }\n  state.scope = {\n    offset: offset,\n    type: type,\n    prev: state.scope,\n    align: align,\n    alignOffset: alignOffset\n  };\n}\n\nfunction dedent(stream, state) {\n  if (!state.scope.prev) return;\n  if (state.scope.type === \"coffee\") {\n    var _indent = stream.indentation();\n    var matched = false;\n    for (var scope = state.scope; scope; scope = scope.prev) {\n      if (_indent === scope.offset) {\n        matched = true;\n        break;\n      }\n    }\n    if (!matched) {\n      return true;\n    }\n    while (state.scope.prev && state.scope.offset !== _indent) {\n      state.scope = state.scope.prev;\n    }\n    return false;\n  } else {\n    state.scope = state.scope.prev;\n    return false;\n  }\n}\n\nfunction tokenLexer(stream, state) {\n  var style = state.tokenize(stream, state);\n  var current = stream.current();\n\n  // Handle scope changes.\n  if (current === \"return\") {\n    state.dedent = true;\n  }\n  if (((current === \"->\" || current === \"=>\") && stream.eol())\n      || style === \"indent\") {\n    indent(stream, state);\n  }\n  var delimiter_index = \"[({\".indexOf(current);\n  if (delimiter_index !== -1) {\n    indent(stream, state, \"])}\".slice(delimiter_index, delimiter_index+1));\n  }\n  if (indentKeywords.exec(current)){\n    indent(stream, state);\n  }\n  if (current == \"then\"){\n    dedent(stream, state);\n  }\n\n\n  if (style === \"dedent\") {\n    if (dedent(stream, state)) {\n      return ERRORCLASS;\n    }\n  }\n  delimiter_index = \"])}\".indexOf(current);\n  if (delimiter_index !== -1) {\n    while (state.scope.type == \"coffee\" && state.scope.prev)\n      state.scope = state.scope.prev;\n    if (state.scope.type == current)\n      state.scope = state.scope.prev;\n  }\n  if (state.dedent && stream.eol()) {\n    if (state.scope.type == \"coffee\" && state.scope.prev)\n      state.scope = state.scope.prev;\n    state.dedent = false;\n  }\n\n  return style == \"indent\" || style == \"dedent\" ? null : style;\n}\n\nexport const coffeeScript = {\n  startState: function() {\n    return {\n      tokenize: tokenBase,\n      scope: {offset: 0, type:\"coffee\", prev: null, align: false},\n      prop: false,\n      dedent: 0\n    };\n  },\n\n  token: function(stream, state) {\n    var fillAlign = state.scope.align === null && state.scope;\n    if (fillAlign && stream.sol()) fillAlign.align = false;\n\n    var style = tokenLexer(stream, state);\n    if (style && style != \"comment\") {\n      if (fillAlign) fillAlign.align = true;\n      state.prop = style == \"punctuation\" && stream.current() == \".\"\n    }\n\n    return style;\n  },\n\n  indent: function(state, text) {\n    if (state.tokenize != tokenBase) return 0;\n    var scope = state.scope;\n    var closer = text && \"])}\".indexOf(text.charAt(0)) > -1;\n    if (closer) while (scope.type == \"coffee\" && scope.prev) scope = scope.prev;\n    var closes = closer && scope.type === text.charAt(0);\n    if (scope.align)\n      return scope.alignOffset - (closes ? 1 : 0);\n    else\n      return (closes ? scope.prev : scope).offset;\n  },\n\n  languageData: {\n    commentTokens: {line: \"#\"}\n  }\n};\n"],"names":["$e8177c8748948d64$var$ERRORCLASS","$e8177c8748948d64$var$wordRegexp","words","RegExp","join","$e8177c8748948d64$var$operators","$e8177c8748948d64$var$delimiters","$e8177c8748948d64$var$identifiers","$e8177c8748948d64$var$atProp","$e8177c8748948d64$var$wordOperators","$e8177c8748948d64$var$indentKeywords","$e8177c8748948d64$var$keywords","concat","$e8177c8748948d64$var$stringPrefixes","$e8177c8748948d64$var$regexPrefixes","$e8177c8748948d64$var$constants","$e8177c8748948d64$var$tokenBase","stream","state","sol","scope","align","scopeOffset","offset","eatSpace","lineOffset","indentation","type","$e8177c8748948d64$var$dedent","ch","peek","match","skipToEnd","tokenize","$e8177c8748948d64$var$longComment","floatLiteral","backUp","intLiteral","$e8177c8748948d64$var$tokenFactory","current","prop","next","delimiter","singleline","outclass","eol","eatWhile","eat","$e8177c8748948d64$var$indent","arguments","length","alignOffset","prev","indentUnit","column","_indent","matched","$e8177c8748948d64$export$8f1a590246f3cf60","startState","dedent","token","fillAlign","style","delimiter_index","indexOf","slice","exec","$e8177c8748948d64$var$tokenLexer","indent","text","closer","charAt","closes","languageData","commentTokens","line"],"version":3,"file":"coffeescript.ccfca849.js.map"}